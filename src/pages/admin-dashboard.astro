---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<Layout>
    <Header />
    
    <main class="admin-dashboard">
        <!-- Header del Dashboard -->
        <div class="dashboard-header">
            <div class="header-content">
                <div class="admin-info">
                    <div class="admin-avatar">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M12 2L2 7v10c0 5.55 3.84 10 9 9 5.16 1 9-3.45 9-9V7L12 2z"/>
                            <path d="M12 8v8"/>
                            <path d="M8 12h8"/>
                        </svg>
                    </div>
                    <div class="admin-details">
                        <h1>Panel de Administración General</h1>
                        <p>Bienvenido, <strong>Luis</strong> - Administrador Principal</p>
                        <span class="status-badge">En línea</span>
                    </div>
                </div>
                <div class="header-actions">
                    <button class="btn-logout" id="logoutBtn">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/>
                            <polyline points="16,17 21,12 16,7"/>
                            <line x1="21" y1="12" x2="9" y2="12"/>
                        </svg>
                        Cerrar Sesión
                    </button>
                </div>
            </div>
        </div>

        <!-- Panel Principal -->
        <div class="dashboard-content">
            <!-- Sección Superior: Gestión de Cuerdas -->
            <div class="top-section">
                <div class="cuerdas-management">
                    <div class="section-header">
                        <h2>
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"/>
                                <circle cx="9" cy="7" r="4"/>
                                <path d="M23 21v-2a4 4 0 0 0-3-3.87"/>
                                <path d="M16 3.13a4 4 0 0 1 0 7.75"/>
                            </svg>
                            Gestión de Cuerdas Registradas
                        </h2>
                        <div class="section-stats">
                            <span class="stat-badge pending">5 Pendientes</span>
                            <span class="stat-badge approved">12 Aprobadas</span>
                            <span class="stat-badge rejected">2 Rechazadas</span>
                        </div>
                    </div>

                    <div class="cuerdas-filters">
                        <select id="statusFilter" class="filter-select">
                            <option value="all">Todas las cuerdas</option>
                            <option value="pending">Pendientes de aprobación</option>
                            <option value="approved">Aprobadas</option>
                            <option value="rejected">Rechazadas</option>
                        </select>
                        <input type="text" id="searchCuerdas" placeholder="Buscar por nombre de cuerda..." class="search-input">
                    </div>

                    <div class="cuerdas-list" id="cuerdasList">
                        <!-- Las cuerdas se cargarán dinámicamente -->
                    </div>
                </div>

                <div class="gallo-registration">
                    <div class="section-header">
                        <h2>
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                            </svg>
                            Registrar Nuevo Gallo
                        </h2>
                    </div>
                    <button class="btn-register-gallo" id="openGalloModal">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <circle cx="12" cy="12" r="10"/>
                            <line x1="12" y1="8" x2="12" y2="16"/>
                            <line x1="8" y1="12" x2="16" y2="12"/>
                        </svg>
                        Registrar Gallo
                    </button>
                    <p class="registration-note">Asigna gallos solo a cuerdas aprobadas</p>
                </div>
            </div>

            <!-- Sección Inferior: Tabla de Estadísticas -->
            <div class="bottom-section">
                <div class="statistics-section">
                    <div class="section-header">
                        <h2>
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <polyline points="22,12 18,12 15,21 9,3 6,12 2,12"/>
                            </svg>
                            Ranking de Cuerdas por Rendimiento
                        </h2>
                        <div class="table-actions">
                            <button class="btn-export">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                                    <polyline points="7,10 12,15 17,10"/>
                                    <line x1="12" y1="15" x2="12" y2="3"/>
                                </svg>
                                Exportar
                            </button>
                            <button class="btn-refresh" id="refreshStats">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <polyline points="23,4 23,10 17,10"/>
                                    <path d="M20.49 15a9 9 0 1 1-2.12-9.36L23 10"/>
                                </svg>
                                Actualizar
                            </button>
                        </div>
                    </div>

                    <div class="stats-table-container">
                        <table class="stats-table" id="statsTable">
                            <thead>
                                <tr>
                                    <th>Posición</th>
                                    <th>Cuerda</th>
                                    <th>Peleas Totales</th>
                                    <th>Peleas Ganadas</th>
                                    <th>% Victoria</th>
                                    <th>Gallos Registrados</th>
                                    <th>Estado</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody id="statsTableBody">
                                <!-- Los datos se cargarán dinámicamente -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Modal para Editar Cuerda -->
    <div class="modal-overlay" id="editCuerdaModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Editar Cuerda</h3>
                <button class="modal-close" data-modal="editCuerdaModal">&times;</button>
            </div>
            <form class="modal-form" id="editCuerdaForm">
                <div class="form-group">
                    <label for="editCuerdaName">Nombre de la Cuerda</label>
                    <input type="text" id="editCuerdaName" required>
                </div>
                <div class="form-group">
                    <label for="editCuerdaStatus">Estado</label>
                    <select id="editCuerdaStatus" required>
                        <option value="pending">Pendiente</option>
                        <option value="approved">Aprobada</option>
                        <option value="rejected">Rechazada</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="editCuerdaNotes">Notas del Administrador</label>
                    <textarea id="editCuerdaNotes" rows="3" placeholder="Notas opcionales..."></textarea>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn-cancel" data-modal="editCuerdaModal">Cancelar</button>
                    <button type="submit" class="btn-save">Guardar Cambios</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal para Registrar Gallo -->
    <div class="modal-overlay" id="galloModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Registrar Nuevo Gallo</h3>
                <button class="modal-close" data-modal="galloModal">&times;</button>
            </div>
            <form class="modal-form" id="galloForm">
                <div class="form-group">
                    <label for="galloName">Nombre del Gallo</label>
                    <input type="text" id="galloName" required placeholder="Ej: El Campeón">
                </div>
                <div class="form-group">
                    <label for="galloCuerda">Asignar a Cuerda</label>
                    <select id="galloCuerda" required>
                        <option value="">Selecciona una cuerda aprobada</option>
                        <!-- Se llenarán dinámicamente las cuerdas aprobadas -->
                    </select>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="galloWeight">Peso (kg)</label>
                        <input type="number" id="galloWeight" step="0.1" min="0" required>
                    </div>
                    <div class="form-group">
                        <label for="galloAge">Edad (meses)</label>
                        <input type="number" id="galloAge" min="1" required>
                    </div>
                </div>
                <div class="form-group">
                    <label for="galloColor">Color del Plumaje</label>
                    <select id="galloColor" required>
                        <option value="">Selecciona un color</option>
                        <option value="colorado">Colorado</option>
                        <option value="pinto">Pinto</option>
                        <option value="blanco">Blanco</option>
                        <option value="negro">Negro</option>
                        <option value="cenizo">Cenizo</option>
                        <option value="giro">Giro</option>
                        <option value="jabao">Jabao</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="galloNotes">Características Especiales</label>
                    <textarea id="galloNotes" rows="3" placeholder="Describe características únicas del gallo..."></textarea>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn-cancel" data-modal="galloModal">Cancelar</button>
                    <button type="submit" class="btn-save">Registrar Gallo</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal para Editar Estadísticas -->
    <div class="modal-overlay" id="editStatsModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Editar Estadísticas de Cuerda</h3>
                <button class="modal-close" data-modal="editStatsModal">&times;</button>
            </div>
            <form class="modal-form" id="editStatsForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="editPeleasTotales">Peleas Totales</label>
                        <input type="number" id="editPeleasTotales" min="0" required>
                    </div>
                    <div class="form-group">
                        <label for="editPeleasGanadas">Peleas Ganadas</label>
                        <input type="number" id="editPeleasGanadas" min="0" required>
                    </div>
                </div>
                <div class="form-group">
                    <label for="editGallosCount">Número de Gallos</label>
                    <input type="number" id="editGallosCount" min="0" required>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn-cancel" data-modal="editStatsModal">Cancelar</button>
                    <button type="submit" class="btn-save">Actualizar Estadísticas</button>
                </div>
            </form>
        </div>
    </div>

    <Footer />
</Layout>

<style>
    .admin-dashboard {
        min-height: calc(100vh - 200px);
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    }

    /* Header del Dashboard */
    .dashboard-header {
        background: linear-gradient(135deg, #1e3a8a 0%, #1d4ed8 100%);
        color: white;
        padding: 2rem 0;
        box-shadow: 0 4px 20px rgba(30, 58, 138, 0.3);
    }

    .header-content {
        max-width: 1400px;
        margin: 0 auto;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 2rem;
    }

    .admin-info {
        display: flex;
        align-items: center;
        gap: 2rem;
    }

    .admin-avatar {
        width: 80px;
        height: 80px;
        background: linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 8px 25px rgba(251, 191, 36, 0.4);
    }

    .admin-avatar svg {
        width: 40px;
        height: 40px;
        color: #1e3a8a;
    }

    .admin-details h1 {
        margin: 0 0 0.5rem;
        font-size: 2rem;
        font-weight: 700;
        color: #fbbf24;
    }

    .admin-details p {
        margin: 0 0 0.5rem;
        font-size: 1.1rem;
        color: rgba(255, 255, 255, 0.9);
    }

    .status-badge {
        display: inline-block;
        padding: 0.3rem 0.8rem;
        background: #10b981;
        color: white;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    .btn-logout {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.8rem 1.5rem;
        background: rgba(255, 255, 255, 0.1);
        color: white;
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 12px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 600;
    }

    .btn-logout:hover {
        background: rgba(255, 255, 255, 0.2);
        border-color: rgba(255, 255, 255, 0.3);
        transform: translateY(-2px);
    }

    /* Contenido Principal */
    .dashboard-content {
        max-width: 1400px;
        margin: 0 auto;
        padding: 2rem;
    }

    .top-section {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 2rem;
        margin-bottom: 3rem;
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #e2e8f0;
    }

    .section-header h2 {
        display: flex;
        align-items: center;
        gap: 0.8rem;
        margin: 0;
        font-size: 1.5rem;
        color: #1e3a8a;
        font-weight: 700;
    }

    .section-header svg {
        width: 24px;
        height: 24px;
        color: #1d4ed8;
    }

    .section-stats {
        display: flex;
        gap: 0.8rem;
    }

    .stat-badge {
        padding: 0.4rem 0.8rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        color: white;
    }

    .stat-badge.pending {
        background: #f59e0b;
    }

    .stat-badge.approved {
        background: #10b981;
    }

    .stat-badge.rejected {
        background: #ef4444;
    }

    /* Gestión de Cuerdas */
    .cuerdas-management {
        background: white;
        border-radius: 16px;
        padding: 2rem;
        box-shadow: 0 4px 25px rgba(0, 0, 0, 0.1);
        border: 1px solid #e2e8f0;
    }

    .cuerdas-filters {
        display: flex;
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .filter-select,
    .search-input {
        padding: 0.8rem 1.2rem;
        border: 2px solid #e2e8f0;
        border-radius: 12px;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

    .filter-select {
        min-width: 200px;
    }

    .search-input {
        flex: 1;
    }

    .filter-select:focus,
    .search-input:focus {
        outline: none;
        border-color: #1d4ed8;
        box-shadow: 0 0 0 3px rgba(29, 78, 216, 0.1);
    }

    .cuerdas-list {
        max-height: 400px;
        overflow-y: auto;
        border-radius: 12px;
        border: 1px solid #e2e8f0;
    }

    .cuerda-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem;
        border-bottom: 1px solid #f1f5f9;
        transition: all 0.3s ease;
    }

    .cuerda-item:hover {
        background: #f8fafc;
    }

    .cuerda-info h4 {
        margin: 0 0 0.5rem;
        color: #1e3a8a;
        font-weight: 600;
    }

    .cuerda-info p {
        margin: 0;
        color: #64748b;
        font-size: 0.9rem;
    }

    .cuerda-status {
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        color: white;
        margin-right: 1rem;
    }

    .cuerda-status.pending {
        background: #f59e0b;
    }

    .cuerda-status.approved {
        background: #10b981;
    }

    .cuerda-status.rejected {
        background: #ef4444;
    }

    .cuerda-actions {
        display: flex;
        gap: 0.5rem;
    }

    .btn-action {
        width: 40px;
        height: 40px;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }

    .btn-action svg {
        width: 20px;
        height: 20px;
    }

    .btn-approve {
        background: #dcfce7;
        color: #16a34a;
    }

    .btn-approve:hover {
        background: #16a34a;
        color: white;
    }

    .btn-edit {
        background: #dbeafe;
        color: #2563eb;
    }

    .btn-edit:hover {
        background: #2563eb;
        color: white;
    }

    .btn-delete {
        background: #fee2e2;
        color: #dc2626;
    }

    .btn-delete:hover {
        background: #dc2626;
        color: white;
    }

    /* Registro de Gallos */
    .gallo-registration {
        background: white;
        border-radius: 16px;
        padding: 2rem;
        box-shadow: 0 4px 25px rgba(0, 0, 0, 0.1);
        border: 1px solid #e2e8f0;
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .btn-register-gallo {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        padding: 1.5rem 2rem;
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
        border: none;
        border-radius: 16px;
        font-size: 1.2rem;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-bottom: 1rem;
        box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);
    }

    .btn-register-gallo:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4);
    }

    .registration-note {
        color: #64748b;
        font-style: italic;
        margin: 0;
    }

    /* Tabla de Estadísticas */
    .statistics-section {
        background: white;
        border-radius: 16px;
        padding: 2rem;
        box-shadow: 0 4px 25px rgba(0, 0, 0, 0.1);
        border: 1px solid #e2e8f0;
    }

    .table-actions {
        display: flex;
        gap: 0.8rem;
    }

    .btn-export,
    .btn-refresh {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.8rem 1.2rem;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-export {
        background: #dbeafe;
        color: #2563eb;
    }

    .btn-refresh {
        background: #f3f4f6;
        color: #374151;
    }

    .btn-export:hover,
    .btn-refresh:hover {
        transform: translateY(-2px);
    }

    .stats-table-container {
        overflow-x: auto;
        border-radius: 12px;
        border: 1px solid #e2e8f0;
    }

    .stats-table {
        width: 100%;
        border-collapse: collapse;
        background: white;
    }

    .stats-table th {
        background: #f8fafc;
        padding: 1.2rem;
        text-align: left;
        font-weight: 700;
        color: #1e3a8a;
        border-bottom: 2px solid #e2e8f0;
    }

    .stats-table td {
        padding: 1.2rem;
        border-bottom: 1px solid #f1f5f9;
        vertical-align: middle;
    }

    .stats-table tr:hover {
        background: #f8fafc;
    }

    .position-badge {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        font-weight: 700;
        color: white;
    }

    .position-1 {
        background: linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%);
    }

    .position-2 {
        background: linear-gradient(135deg, #9ca3af 0%, #6b7280 100%);
    }

    .position-3 {
        background: linear-gradient(135deg, #cd7c2f 0%, #92400e 100%);
    }

    .position-other {
        background: #64748b;
    }

    .victory-percentage {
        font-weight: 700;
    }

    .victory-high {
        color: #16a34a;
    }

    .victory-medium {
        color: #f59e0b;
    }

    .victory-low {
        color: #dc2626;
    }

    /* Modales */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.6);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        backdrop-filter: blur(5px);
    }

    .modal-overlay.active {
        display: flex;
    }

    .modal-content {
        background: white;
        border-radius: 20px;
        padding: 0;
        max-width: 500px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        animation: modalSlideIn 0.3s ease-out;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 2rem 2rem 1rem;
        border-bottom: 2px solid #f1f5f9;
    }

    .modal-header h3 {
        margin: 0;
        color: #1e3a8a;
        font-size: 1.4rem;
        font-weight: 700;
    }

    .modal-close {
        width: 40px;
        height: 40px;
        border: none;
        background: #f1f5f9;
        border-radius: 50%;
        cursor: pointer;
        font-size: 1.5rem;
        color: #64748b;
        transition: all 0.3s ease;
    }

    .modal-close:hover {
        background: #e2e8f0;
        color: #1e3a8a;
    }

    .modal-form {
        padding: 2rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: #374151;
    }

    .form-group input,
    .form-group select,
    .form-group textarea {
        width: 100%;
        padding: 1rem;
        border: 2px solid #e2e8f0;
        border-radius: 12px;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

    .form-group input:focus,
    .form-group select:focus,
    .form-group textarea:focus {
        outline: none;
        border-color: #1d4ed8;
        box-shadow: 0 0 0 3px rgba(29, 78, 216, 0.1);
    }

    .modal-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        padding-top: 1rem;
        border-top: 2px solid #f1f5f9;
    }

    .btn-cancel,
    .btn-save {
        padding: 1rem 2rem;
        border: none;
        border-radius: 12px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-cancel {
        background: #f1f5f9;
        color: #64748b;
    }

    .btn-save {
        background: linear-gradient(135deg, #1e3a8a 0%, #1d4ed8 100%);
        color: white;
    }

    .btn-cancel:hover,
    .btn-save:hover {
        transform: translateY(-2px);
    }

    /* Responsive */
    @media (max-width: 1024px) {
        .top-section {
            grid-template-columns: 1fr;
        }

        .header-content {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
        }

        .dashboard-content {
            padding: 1rem;
        }
    }

    @media (max-width: 768px) {
        .cuerdas-filters {
            flex-direction: column;
        }

        .form-row {
            grid-template-columns: 1fr;
        }

        .stats-table-container {
            font-size: 0.9rem;
        }

        .modal-content {
            margin: 1rem;
            width: calc(100% - 2rem);
        }
    }

    /* Animaciones */
    @keyframes modalSlideIn {
        from {
            opacity: 0;
            transform: translateY(50px) scale(0.95);
        }
        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Datos simulados para la demostración
        const mockCuerdas: Cuerda[] = [
            { id: 1, name: "Los Invencibles", status: "approved", registrationDate: "2024-01-15", notes: "" },
            { id: 2, name: "Águilas Doradas", status: "pending", registrationDate: "2024-02-20", notes: "" },
            { id: 3, name: "Tigres del Norte", status: "approved", registrationDate: "2024-01-30", notes: "" },
            { id: 4, name: "Leones Bravos", status: "pending", registrationDate: "2024-02-25", notes: "" },
            { id: 5, name: "Falcones Reales", status: "rejected", registrationDate: "2024-02-10", notes: "Documentos incompletos" },
            { id: 6, name: "Guerreros del Sur", status: "approved", registrationDate: "2024-01-05", notes: "" },
            { id: 7, name: "Campeones Unidos", status: "pending", registrationDate: "2024-03-01", notes: "" }
        ];

        const mockStats: Stats[] = [
            { id: 1, cuerda: "Los Invencibles", peleasTotales: 25, peleasGanadas: 20, gallos: 8, status: "approved" },
            { id: 3, cuerda: "Tigres del Norte", peleasTotales: 18, peleasGanadas: 14, gallos: 6, status: "approved" },
            { id: 6, cuerda: "Guerreros del Sur", peleasTotales: 22, peleasGanadas: 15, gallos: 7, status: "approved" },
            { id: 2, cuerda: "Águilas Doradas", peleasTotales: 12, peleasGanadas: 8, gallos: 4, status: "pending" },
            { id: 4, cuerda: "Leones Bravos", peleasTotales: 8, peleasGanadas: 5, gallos: 3, status: "pending" }
        ];

        // Tipos para TypeScript
        interface Cuerda {
            id: number;
            name: string;
            status: 'pending' | 'approved' | 'rejected';
            registrationDate: string;
            notes: string;
        }

        interface Stats {
            id: number;
            cuerda: string;
            peleasTotales: number;
            peleasGanadas: number;
            gallos: number;
            status: 'pending' | 'approved' | 'rejected';
        }

        let currentEditingCuerda: Cuerda | null = null;
        let currentEditingStats: Stats | null = null;

        // Inicializar la página
        loadCuerdas();
        loadStats();
        loadApprovedCuerdasForGallo();

        // Event Listeners
        document.getElementById('statusFilter')?.addEventListener('change', filterCuerdas);
        document.getElementById('searchCuerdas')?.addEventListener('input', filterCuerdas);
        document.getElementById('openGalloModal')?.addEventListener('click', () => openModal('galloModal'));
        document.getElementById('refreshStats')?.addEventListener('click', loadStats);
        document.getElementById('logoutBtn')?.addEventListener('click', logout);

        // Event listeners para modales
        document.querySelectorAll('.modal-close, .btn-cancel').forEach(btn => {
            btn.addEventListener('click', function(this: HTMLElement) {
                const modalId = (this as HTMLElement).dataset.modal || (this.closest('.modal-overlay') as HTMLElement)?.id;
                if (modalId) closeModal(modalId);
            });
        });

        // Event listeners para formularios
        document.getElementById('editCuerdaForm')?.addEventListener('submit', saveEditCuerda);
        document.getElementById('galloForm')?.addEventListener('submit', saveGallo);
        document.getElementById('editStatsForm')?.addEventListener('submit', saveEditStats);

        // Funciones para cargar datos
        function loadCuerdas() {
            const container = document.getElementById('cuerdasList');
            if (!container) return;

            container.innerHTML = mockCuerdas.map(cuerda => `
                <div class="cuerda-item" data-id="${cuerda.id}" data-status="${cuerda.status}">
                    <div class="cuerda-info">
                        <h4>${cuerda.name}</h4>
                        <p>Registrado: ${new Date(cuerda.registrationDate).toLocaleDateString('es-ES')}</p>
                        ${cuerda.notes ? `<p><em>${cuerda.notes}</em></p>` : ''}
                    </div>
                    <div style="display: flex; align-items: center;">
                        <span class="cuerda-status ${cuerda.status}">
                            ${cuerda.status === 'pending' ? 'Pendiente' : 
                              cuerda.status === 'approved' ? 'Aprobada' : 'Rechazada'}
                        </span>
                        <div class="cuerda-actions">
                            ${cuerda.status === 'pending' ? `
                                <button class="btn-action btn-approve" onclick="approveCuerda(${cuerda.id})">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <polyline points="20,6 9,17 4,12"/>
                                    </svg>
                                </button>
                            ` : ''}
                            <button class="btn-action btn-edit" onclick="editCuerda(${cuerda.id})">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
                                    <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
                                </svg>
                            </button>
                            <button class="btn-action btn-delete" onclick="deleteCuerda(${cuerda.id})">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <polyline points="3,6 5,6 21,6"/>
                                    <path d="M19,6v14a2,2,0,0,1-2,2H7a2,2,0,0,1-2-2V6m3,0V4a2,2,0,0,1,2-2h4a2,2,0,0,1,2,2V6"/>
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function loadStats() {
            const tbody = document.getElementById('statsTableBody');
            if (!tbody) return;

            // Ordenar por porcentaje de victoria
            const sortedStats = [...mockStats].sort((a, b) => {
                const aPercent = (a.peleasGanadas / a.peleasTotales) * 100;
                const bPercent = (b.peleasGanadas / b.peleasTotales) * 100;
                return bPercent - aPercent;
            });

            tbody.innerHTML = sortedStats.map((stat, index) => {
                const victoryPercent = parseFloat(((stat.peleasGanadas / stat.peleasTotales) * 100).toFixed(1));
                const position = index + 1;
                
                let positionClass = 'position-other';
                if (position === 1) positionClass = 'position-1';
                else if (position === 2) positionClass = 'position-2';
                else if (position === 3) positionClass = 'position-3';

                let victoryClass = 'victory-low';
                if (victoryPercent >= 75) victoryClass = 'victory-high';
                else if (victoryPercent >= 50) victoryClass = 'victory-medium';

                return `
                    <tr data-id="${stat.id}">
                        <td>
                            <div class="position-badge ${positionClass}">
                                ${position}
                            </div>
                        </td>
                        <td><strong>${stat.cuerda}</strong></td>
                        <td>${stat.peleasTotales}</td>
                        <td>${stat.peleasGanadas}</td>
                        <td><span class="victory-percentage ${victoryClass}">${victoryPercent}%</span></td>
                        <td>${stat.gallos}</td>
                        <td><span class="cuerda-status ${stat.status}">
                            ${stat.status === 'approved' ? 'Aprobada' : 'Pendiente'}
                        </span></td>
                        <td>
                            <div class="cuerda-actions">
                                <button class="btn-action btn-edit" onclick="editStats(${stat.id})">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
                                        <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
                                    </svg>
                                </button>
                                <button class="btn-action btn-delete" onclick="deleteStats(${stat.id})">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <polyline points="3,6 5,6 21,6"/>
                                        <path d="M19,6v14a2,2,0,0,1-2,2H7a2,2,0,0,1-2-2V6m3,0V4a2,2,0,0,1,2-2h4a2,2,0,0,1,2,2V6"/>
                                    </svg>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        function loadApprovedCuerdasForGallo() {
            const select = document.getElementById('galloCuerda');
            if (!select) return;

            const approvedCuerdas = mockCuerdas.filter(c => c.status === 'approved');
            select.innerHTML = '<option value="">Selecciona una cuerda aprobada</option>' +
                approvedCuerdas.map(cuerda => 
                    `<option value="${cuerda.id}">${cuerda.name}</option>`
                ).join('');
        }

        function filterCuerdas() {
            const statusFilter = (document.getElementById('statusFilter') as HTMLSelectElement)?.value || 'all';
            const searchTerm = (document.getElementById('searchCuerdas') as HTMLInputElement)?.value.toLowerCase() || '';
            
            const items = document.querySelectorAll('.cuerda-item');
            items.forEach(item => {
                const status = (item as HTMLElement).dataset.status;
                const name = item.querySelector('h4')?.textContent?.toLowerCase() || '';
                
                const statusMatch = statusFilter === 'all' || status === statusFilter;
                const nameMatch = name.includes(searchTerm);
                
                (item as HTMLElement).style.display = statusMatch && nameMatch ? 'flex' : 'none';
            });
        }

        // Funciones para modales
        function openModal(modalId: string) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.add('active');
                document.body.style.overflow = 'hidden';
            }
        }

        function closeModal(modalId: string) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.remove('active');
                document.body.style.overflow = '';
                
                // Limpiar formularios
                const form = modal.querySelector('form');
                if (form) {
                    (form as HTMLFormElement).reset();
                }
                
                currentEditingCuerda = null;
                currentEditingStats = null;
            }
        }

        // Funciones globales (las exponemos al objeto window)
        (window as any).approveCuerda = function(id: number) {
            const cuerda = mockCuerdas.find(c => c.id === id);
            if (cuerda && confirm(`¿Aprobar la cuerda "${cuerda.name}"?`)) {
                cuerda.status = 'approved';
                loadCuerdas();
                loadApprovedCuerdasForGallo();
                updateStats();
                alert(`¡Cuerda "${cuerda.name}" aprobada exitosamente!`);
            }
        };

        (window as any).editCuerda = function(id: number) {
            currentEditingCuerda = mockCuerdas.find(c => c.id === id) || null;
            if (currentEditingCuerda) {
                (document.getElementById('editCuerdaName') as HTMLInputElement).value = currentEditingCuerda.name;
                (document.getElementById('editCuerdaStatus') as HTMLSelectElement).value = currentEditingCuerda.status;
                (document.getElementById('editCuerdaNotes') as HTMLTextAreaElement).value = currentEditingCuerda.notes || '';
                openModal('editCuerdaModal');
            }
        };

        (window as any).deleteCuerda = function(id: number) {
            const cuerda = mockCuerdas.find(c => c.id === id);
            if (cuerda && confirm(`¿Eliminar definitivamente la cuerda "${cuerda.name}"?`)) {
                const index = mockCuerdas.findIndex(c => c.id === id);
                mockCuerdas.splice(index, 1);
                loadCuerdas();
                loadApprovedCuerdasForGallo();
                updateStats();
                alert(`Cuerda "${cuerda.name}" eliminada.`);
            }
        };

        (window as any).editStats = function(id: number) {
            currentEditingStats = mockStats.find(s => s.id === id) || null;
            if (currentEditingStats) {
                (document.getElementById('editPeleasTotales') as HTMLInputElement).value = currentEditingStats.peleasTotales.toString();
                (document.getElementById('editPeleasGanadas') as HTMLInputElement).value = currentEditingStats.peleasGanadas.toString();
                (document.getElementById('editGallosCount') as HTMLInputElement).value = currentEditingStats.gallos.toString();
                openModal('editStatsModal');
            }
        };

        (window as any).deleteStats = function(id: number) {
            const stat = mockStats.find(s => s.id === id);
            if (stat && confirm(`¿Eliminar las estadísticas de "${stat.cuerda}"?`)) {
                const index = mockStats.findIndex(s => s.id === id);
                mockStats.splice(index, 1);
                loadStats();
                updateStats();
                alert(`Estadísticas de "${stat.cuerda}" eliminadas.`);
            }
        };

        // Funciones para guardar
        function saveEditCuerda(e: Event) {
            e.preventDefault();
            if (!currentEditingCuerda) return;

            const name = (document.getElementById('editCuerdaName') as HTMLInputElement).value;
            const status = (document.getElementById('editCuerdaStatus') as HTMLSelectElement).value;
            const notes = (document.getElementById('editCuerdaNotes') as HTMLTextAreaElement).value;

            currentEditingCuerda.name = name;
            currentEditingCuerda.status = status as 'pending' | 'approved' | 'rejected';
            currentEditingCuerda.notes = notes;

            loadCuerdas();
            loadApprovedCuerdasForGallo();
            updateStats();
            closeModal('editCuerdaModal');
            alert('¡Cuerda actualizada exitosamente!');
        }

        function saveGallo(e: Event) {
            e.preventDefault();
            
            const formData = new FormData(document.getElementById('galloForm') as HTMLFormElement);
            const galloData = {
                name: formData.get('galloName'),
                cuerda: formData.get('galloCuerda'),
                weight: formData.get('galloWeight'),
                age: formData.get('galloAge'),
                color: formData.get('galloColor'),
                notes: formData.get('galloNotes')
            };

            const cuerda = mockCuerdas.find(c => c.id == parseInt(galloData.cuerda as string));
            
            if (cuerda) {
                alert(`¡Gallo "${galloData.name}" registrado exitosamente para la cuerda "${cuerda.name}"!`);
                closeModal('galloModal');
                
                // Aquí actualizaríamos el contador de gallos en las estadísticas
                const stat = mockStats.find(s => s.id === cuerda.id);
                if (stat) {
                    stat.gallos++;
                    loadStats();
                }
            }
        }

        function saveEditStats(e: Event) {
            e.preventDefault();
            if (!currentEditingStats) return;

            const peleasTotales = parseInt((document.getElementById('editPeleasTotales') as HTMLInputElement).value);
            const peleasGanadas = parseInt((document.getElementById('editPeleasGanadas') as HTMLInputElement).value);
            const gallos = parseInt((document.getElementById('editGallosCount') as HTMLInputElement).value);

            if (peleasGanadas > peleasTotales) {
                alert('Las peleas ganadas no pueden ser mayores que las peleas totales.');
                return;
            }

            currentEditingStats.peleasTotales = peleasTotales;
            currentEditingStats.peleasGanadas = peleasGanadas;
            currentEditingStats.gallos = gallos;

            loadStats();
            closeModal('editStatsModal');
            alert('¡Estadísticas actualizadas exitosamente!');
        }

        function updateStats() {
            // Actualizar contadores en la sección de estadísticas
            const pending = mockCuerdas.filter(c => c.status === 'pending').length;
            const approved = mockCuerdas.filter(c => c.status === 'approved').length;
            const rejected = mockCuerdas.filter(c => c.status === 'rejected').length;

            document.querySelector('.stat-badge.pending')!.textContent = `${pending} Pendientes`;
            document.querySelector('.stat-badge.approved')!.textContent = `${approved} Aprobadas`;
            document.querySelector('.stat-badge.rejected')!.textContent = `${rejected} Rechazadas`;
        }

        function logout() {
            if (confirm('¿Cerrar sesión como administrador?')) {
                alert('Sesión cerrada. Redirigiendo...');
                window.location.href = '/';
            }
        }

        // Cerrar modales al hacer clic fuera
        document.querySelectorAll('.modal-overlay').forEach(overlay => {
            overlay.addEventListener('click', function(this: HTMLElement, e: Event) {
                if (e.target === this) {
                    closeModal(this.id);
                }
            });
        });

        // Inicializar estadísticas
        updateStats();
    });
</script>
