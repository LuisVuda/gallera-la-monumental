veri---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<Layout>
    <Header />
    
    <main class="register-main">
        <div class="register-container">
            <div class="register-header">
                <h1>Registro de Cuerda</h1>
                <p>Complete la información para registrar una nueva cuerda</p>
            </div>

            <form class="register-form" id="cuerdaForm">
                <div class="form-group">
                    <label for="nombreCuerda">Nombre de la Cuerda *</label>
                    <input 
                        type="text" 
                        id="nombreCuerda" 
                        name="nombreCuerda" 
                        required 
                        placeholder="Ej: Los Invencibles"
                        class="form-input"
                    >
                </div>

                <div class="form-group">
                    <label for="localidad">Localidad de la Cuerda *</label>
                    <input 
                        type="text" 
                        id="localidad" 
                        name="localidad" 
                        required 
                        placeholder="Ej: San José, Costa Rica"
                        class="form-input"
                    >
                </div>

                <div class="form-group">
                    <label for="integrantes">Integrantes de la Cuerda *</label>
                    <textarea 
                        id="integrantes" 
                        name="integrantes" 
                        required 
                        placeholder="Ingrese los nombres de los integrantes, separados por comas"
                        class="form-textarea"
                        rows="4"
                    ></textarea>
                    <small class="form-help">Separe cada nombre con comas (,)</small>
                </div>

                <div class="form-group">
                    <label for="representante">Representante Principal de la Cuerda *</label>
                    <input 
                        type="text" 
                        id="representante" 
                        name="representante" 
                        required 
                        placeholder="Ej: Juan Carlos Méndez"
                        class="form-input"
                    >
                </div>

                <div class="form-group">
                    <label for="telefono">Teléfono de Contacto</label>
                    <input 
                        type="tel" 
                        id="telefono" 
                        name="telefono" 
                        placeholder="Ej: +506 8888-8888"
                        class="form-input"
                    >
                </div>

                <div class="form-group">
                    <label for="email">Correo Electrónico</label>
                    <input 
                        type="email" 
                        id="email" 
                        name="email" 
                        placeholder="Ej: representante@email.com"
                        class="form-input"
                    >
                </div>

                <div class="form-group">
                    <label for="contrasena">Contraseña de la Cuerda</label>
                    <input 
                        type="password" 
                        id="contrasena" 
                        name="contrasena" 
                        required 
                        placeholder="Ingrese una contraseña segura"
                        class="form-input"
                        minlength="6"
                    >
                    <small class="form-help">Será la contraseña para iniciar sesión</small>
                </div>

                <div class="form-actions">
                    <button type="button" class="btn-cancel" onclick="window.history.back()">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon">
                            <path d="m15 18-6-6 6-6"/>
                        </svg>
                        Cancelar
                    </button>
                    
                    <button type="submit" class="btn-save">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon">
                            <path d="m9 12 2 2 4-4"/>
                            <path d="M21 12c.552 0 1-.448 1-1V5c0-.552-.448-1-1-1H3c-.552 0-1 .448-1 1v6c0 .552.448 1 1 1h18z"/>
                        </svg>
                        Guardar Información
                    </button>
                </div>
            </form>
        </div>
    </main>

    <Footer />
</Layout>

<style>
    .register-main {
        min-height: calc(100vh - 200px);
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        padding: 2rem 0;
    }

    .register-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 0 2rem;
    }

    .register-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .register-header h1 {
        font-size: 2.5rem;
        color: #2c3e50;
        margin-bottom: 0.5rem;
        font-weight: 700;
    }

    .register-header p {
        font-size: 1.1rem;
        color: #6c757d;
        margin: 0;
    }

    .register-form {
        background: white;
        padding: 3rem;
        border-radius: 20px;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .form-group {
        margin-bottom: 2rem;
    }

    .form-group label {
        display: block;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.5rem;
        font-size: 1rem;
    }

    .form-input,
    .form-textarea {
        width: 100%;
        padding: 1rem 1.2rem;
        border: 2px solid #e9ecef;
        border-radius: 10px;
        font-size: 1rem;
        transition: all 0.3s ease;
        background: #f8f9fa;
        font-family: inherit;
    }

    .form-input:focus,
    .form-textarea:focus {
        outline: none;
        border-color: #007bff;
        background: white;
        box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
    }

    .form-textarea {
        resize: vertical;
        min-height: 100px;
    }

    .form-help {
        display: block;
        margin-top: 0.5rem;
        font-size: 0.875rem;
        color: #6c757d;
        font-style: italic;
    }

    .form-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-top: 3rem;
        padding-top: 2rem;
        border-top: 1px solid #e9ecef;
    }

    .btn-cancel,
    .btn-save {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 1rem 2rem;
        font-size: 1rem;
        font-weight: 600;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
        min-width: 160px;
        justify-content: center;
    }

    .btn-cancel {
        background: #6c757d;
        color: white;
    }

    .btn-cancel:hover {
        background: #5a6268;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(108, 117, 125, 0.3);
    }

    .btn-save {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
    }

    .btn-save:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(40, 167, 69, 0.3);
    }

    .icon {
        width: 18px;
        height: 18px;
    }

    /* Validación visual */
    .form-input:invalid:not(:focus):not(:placeholder-shown) {
        border-color: #dc3545;
        background: #fff5f5;
    }

    .form-input:valid:not(:focus):not(:placeholder-shown) {
        border-color: #28a745;
        background: #f8fff8;
    }

    /* Estado de error agregado por JavaScript */
    .form-input.error,
    .form-textarea.error {
        border-color: #dc3545 !important;
        background: #fff5f5 !important;
        box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1) !important;
    }

    /* Estilos específicos para campo de contraseña */
    .form-input[type="password"] {
        font-family: monospace;
    }

    .form-input[type="password"]:focus {
        font-family: inherit;
    }

    /* Indicador de fuerza de contraseña */
    .password-strength {
        margin-top: 0.5rem;
        height: 4px;
        border-radius: 2px;
        transition: all 0.3s ease;
    }

    .password-strength.weak {
        background: #dc3545;
        width: 33%;
    }

    .password-strength.medium {
        background: #ffc107;
        width: 66%;
    }

    .password-strength.strong {
        background: #28a745;
        width: 100%;
    }

    /* Responsive */
    @media (max-width: 768px) {
        .register-main {
            padding: 1rem 0;
        }

        .register-container {
            padding: 0 1rem;
        }

        .register-header h1 {
            font-size: 2rem;
        }

        .register-form {
            padding: 2rem 1.5rem;
        }

        .form-actions {
            flex-direction: column;
            align-items: center;
        }

        .btn-cancel,
        .btn-save {
            min-width: 200px;
        }
    }

    /* Animación de carga */
    .register-form {
        animation: slideUp 0.5s ease-out;
    }

    @keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<script>
    // Esperar a que el DOM esté completamente cargado
    document.addEventListener('DOMContentLoaded', function() {
        // Manejo del formulario
        const cuerdaForm = document.getElementById('cuerdaForm') as HTMLFormElement;
        if (cuerdaForm) {
            cuerdaForm.addEventListener('submit', function(e: Event) {
                e.preventDefault();
                
                // Validar que todos los campos requeridos estén llenos
                const requiredInputs = cuerdaForm.querySelectorAll('input[required], textarea[required]');
                let isValid = true;
                
                requiredInputs.forEach((input) => {
                    const field = input as HTMLInputElement | HTMLTextAreaElement;
                    if (!field.value.trim()) {
                        field.classList.add('error');
                        isValid = false;
                    } else {
                        field.classList.remove('error');
                    }
                });
                
                if (!isValid) {
                    alert('Por favor, complete todos los campos requeridos.');
                    return;
                }
                
                // Validar contraseña mínima
                const contrasenaInput = document.getElementById('contrasena') as HTMLInputElement;
                if (contrasenaInput && contrasenaInput.value.length < 6) {
                    contrasenaInput.classList.add('error');
                    alert('La contraseña debe tener al menos 6 caracteres.');
                    return;
                }
                
                // Aquí puedes agregar la lógica para enviar los datos al servidor
                const formData = new FormData(cuerdaForm);
                const data = Object.fromEntries(formData);
                
                // Por ahora solo mostramos los datos en consola
                console.log('Datos del formulario:', data);
                
                // Simular guardado exitoso
                alert('¡Cuerda registrada exitosamente!');
                
                // Opcional: redirigir a la página principal
                // window.location.href = '/';
            });
        }
        
        // Validación en tiempo real
        const requiredFields = document.querySelectorAll('input[required], textarea[required]');
        requiredFields.forEach((field) => {
            const inputField = field as HTMLInputElement | HTMLTextAreaElement;
            if (inputField) {
                inputField.addEventListener('blur', function(this: HTMLInputElement | HTMLTextAreaElement) {
                    if (this.value.trim() === '') {
                        this.classList.add('error');
                    } else {
                        this.classList.remove('error');
                    }
                });
            }
        });

        // Validación de contraseña en tiempo real
        const contrasenaInput = document.getElementById('contrasena') as HTMLInputElement;
        if (contrasenaInput) {
            // Crear indicador de fuerza de contraseña
            const strengthIndicator = document.createElement('div');
            strengthIndicator.className = 'password-strength';
            contrasenaInput.parentNode?.appendChild(strengthIndicator);

            contrasenaInput.addEventListener('input', function() {
                const password = this.value;
                const strength = getPasswordStrength(password);
                
                strengthIndicator.className = `password-strength ${strength}`;
                
                // Actualizar el texto de ayuda
                const helpText = contrasenaInput.parentNode?.querySelector('.form-help') as HTMLElement;
                if (helpText) {
                    if (password.length === 0) {
                        helpText.textContent = 'Será la contraseña para iniciar sesión';
                    } else if (password.length < 6) {
                        helpText.textContent = 'La contraseña debe tener al menos 6 caracteres';
                        helpText.style.color = '#dc3545';
                    } else {
                        helpText.textContent = `Contraseña ${strength === 'strong' ? 'fuerte' : strength === 'medium' ? 'media' : 'débil'}`;
                        helpText.style.color = strength === 'strong' ? '#28a745' : strength === 'medium' ? '#ffc107' : '#dc3545';
                    }
                }
            });
        }
    });

    // Función para evaluar la fuerza de la contraseña
    function getPasswordStrength(password: string): string {
        if (password.length < 6) return 'weak';
        
        let score = 0;
        if (password.length >= 8) score++;
        if (/[A-Z]/.test(password)) score++;
        if (/[a-z]/.test(password)) score++;
        if (/[0-9]/.test(password)) score++;
        if (/[^A-Za-z0-9]/.test(password)) score++;
        
        if (score >= 4) return 'strong';
        if (score >= 2) return 'medium';
        return 'weak';
    }
</script>
